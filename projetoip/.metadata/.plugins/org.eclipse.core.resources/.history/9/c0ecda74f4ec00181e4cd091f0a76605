package Repositorios;

import pessoas.ContaAbstrata;

public class RepositorioContasLista implements RepositorioContas {
	private ContaAbstrata conta;
	private String aux;
	private RepositorioContasLista contaProxima;

	public RepositorioContasLista() {
		this.conta = null;
		this.contaProxima = null;
	}

	public void inserir(ContaAbstrata conta) { // inserir em ordem crescente de idades
		boolean resultado = this.existe(conta.getCpf());
		if (resultado == true) {
			int aux = 0;
			int numeroDeContas = this.quantDePessoas(aux) + 1;
			if (numeroDeContas <= 100) {
				if (this.conta != null) {
					this.contaProxima.inserir(conta);
				} else {
					this.conta = conta;
					this.contaProxima = new RepositorioContasLista();
				}
			} else {
				System.out.println("NUMERO DE LIMITES DE CADASTROS EXCEDIDOS");
			}
		} else {
			System.out.println("CPF ja cadastrado");
		}
	}

	public boolean existe(String cpf) {
		if (this.conta != null) {
			if (this.conta.getCpf().equals(cpf)) {
				return false;
			} else {
				return this.contaProxima.existe(cpf);
			}
		} else {
			return true;
		}
	}

	public void remover(String numero) {
		if (this.conta != null) {
			if (this.conta.getCpf().equals(numero)) {
				this.conta = this.contaProxima.conta;
				this.aux = this.contaProxima.aux;
				this.contaProxima = this.contaProxima.contaProxima;
				this.numeroDeConta -= 1;
			} else {
				this.contaProxima.remover(numero);
			}
		} else {
			throw new RuntimeException("CPF NAO CADASTRADO");
		}
	}

	public void atualizar(ContaAbstrata conta) {
		if (this.conta != null) {
			if (this.conta.getCpf().equals(conta.getCpf())) {
				this.conta = conta;
			} else {
				this.contaProxima.atualizar(conta);
			}
		} else {
			throw new RuntimeException("CPF NAO CADASTRADO");
		}
	}

	public ContaAbstrata procurar(String cpf) {
		boolean resultado = this.existe(conta.getCpf());
		if (this.conta != null) {
			if (this.conta.getCpf().equals(cpf)) {
				return this.conta;
			} else {
				return this.contaProxima.procurar(cpf);
			}
		} else {
			throw new RuntimeException("CPF NAO CADASTRADO");
		}
	}

	public String imprimir(ContaAbstrata conta) {
		boolean resultado = this.existe(conta.getCpf());
		if (resultado == true) {
			String imprimir = "";
			if (conta.getCliente() == true) {
				imprimir = "\n#CONTA FUNCIONARIO#";
			} else {
				imprimir = "\n#CONTA CLIENTE#";
			}
			imprimir += "\nNome : " + conta.getNome();
			imprimir += "\nIdade : " + conta.getIdade();
			imprimir += "\nCPF : " + conta.getCpf();
			imprimir += "\nSaldo : " + conta.getSaldo() + "\n";
			return imprimir;
		} else {
			throw new RuntimeException("CPF NAO CADASTRADO");
		}
	}
	
	public int quantDePessoas (int aux) {
		if (conta != null) {
			aux += 1;
			return this.contaProxima.quantDePessoas(aux);
		} else {
			return aux;
		}
	}

	public void debitar(String cpf, double valor) {
		ContaAbstrata debito = this.procurar(cpf);
		debito.debitar(valor);
	}

	public void creditar(String cpf, double valor) {
		ContaAbstrata credito = this.procurar(cpf);
		credito.creditar(valor);
	}
}
